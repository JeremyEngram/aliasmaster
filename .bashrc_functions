
#sudo inotifywait -m -r -e modify,create,delete,move /var/www/html | while read path action file; do
#  echo "$(date): $file $action" >> /var/log/apache2/changes.log
#echo "logging active apache lamp directory and file changes to:   /var/log/apache2/changes.log  
#done; clear 
#echo



# Function to generate documentation for a directory of Bash scripts
generate_documentation() {
    local input_directory="$1"
    local output_directory="$2"
    
    # Create the output directory if it doesn't exist
    mkdir -p "$output_directory"
    
    # Loop through each script in the input directory
    for script in "$input_directory"/*.sh; do
        # Check if the file is a regular file
        if [ -f "$script" ]; then
            # Extract the file name without the path and extension
            script_name=$(basename "${script%.sh}")
            
            # Generate the output Markdown file name
            output_markdown="$output_directory/${script_name}_documentation.md"
            
            # Run the shdoc-generator.sh script
            ./shdoc-generator.sh "$script" "$output_markdown"
            
            if [ "$?" -eq 0 ]; then
                echo "Documentation for $script_name generated and saved to $output_markdown."
            else
                echo "Documentation generation for $script_name failed."
            fi
        fi
    done
}

# Usage
generate_documentation "/path/to/scripts" "/path/to/documentation"




cgreplinks() {
  if [ -z "$1" ]; then
    echo "Usage: cgreplinks <URL>"
  else
    curl -s "$1" | grep -Eo 'href="[^"]+"' | sed -E 's/href=//;s/"//g'
  fi
}

wgreplinks() {
  if [ -z "$1" ]; then
    echo "Usage: wgreplinks <URL>"
  else
    wget -q -O - "$1" | grep -Eo 'href="[^"]+"' | sed -E 's/href=//;s/"//g'
  fi
}



langchain() {
  python3 -m /env/venv
  npm install -m langchain
}

langflow() {
  npm install langflow
}

flowise() {
  npm start flowise
  xdg-open https://$hostname:3000
}




function logerr () { 
    sudo grep -oE "ERROR|WARN" /var/log/*log* | sort |  uniq -c 
}


function fd () {
    find . -name "$1" 2>/dev/null
}


function mkcd() {
    mkdir -p "$1"
    cd "$1"
}



function save_script_log() {
    local log_file="/tmp/script_log.txt"
    local destination="${1:-~/Desktop/script_log.txt}"

    # Start script command with appending and flush options
    script -a -f "$log_file"

    # Check if script command succeeded
    if [ $? -eq 0 ]; then
        # Copy the log file to the specified destination, defaulting to ~/Desktop
        cp "$log_file" "$destination"
        echo "Log file saved to $destination"
    else
        echo "Script command failed."
        return 1
    fi
}


function find_and_remove_all() {
    read -p "Enter filename pattern to find and remove: " pattern

    # Check if user input is empty
    if [[ -z "$pattern" ]]; then
        echo "No pattern provided. Exiting."
        return 1
    fi

    # Use find command safely with proper quoting to handle filenames with spaces and special characters
    find . -type f -name "$pattern" -print0 | xargs -0 -r rm -f

    echo "Files matching pattern '$pattern' have been removed."
}


function set_network_mode() {
    local interface="${1:-wlan0}" # Default to wlan0 if no argument is provided
    local mode="$2" # The desired mode ('managed' or 'monitor')

    # Validate mode input
    if [[ "$mode" != "managed" && "$mode" != "monitor" ]]; then
        echo "Invalid mode specified. Please choose 'managed' or 'monitor'."
        return 1
    fi

    echo "Setting $interface to $mode mode..."
    sudo ifconfig "$interface" down
    sudo iwconfig "$interface" mode "$mode"
    sudo ifconfig "$interface" up

    if [ $? -eq 0 ]; then
        echo "$interface is now in $mode mode."
    else
        echo "Failed to set $interface to $mode mode."
        return 1
    fi
}
